accessible: true
author: Tanguy De Bels
context: ''
environment: mcq
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: 'Session Test: QCM'
network_grading: false
order: 28
problems:
    qcm1:
        choices:
        -   text: |-
                .. code-block:: python

                    my var1 = 7
                    my var2 = 6
                    print(my var1 * my var2)
            feedback: |-
                In the Python language, whitespace in a variable's name is not allowed.

                You can compensate with:

                -CamelCasing: myVar

                -Underscores: my_var (prefered Python naming conventions)
        -   feedback: You should pay attention to the name of your variable since
                Python is case-sensitive.
            text: |-
                .. code-block:: python

                    myVar1 = 35
                    myvar2 = 7
                    print(myvar1 + myVar2)
        -   text: |-
                .. code-block:: python

                    myVar1 = '4'
                    myvar2 = '2'
                    print(myVar1 + myvar2)
            valid: true
        name: Variable assignment
        type: multiple_choice
        limit: 3
        header: Pick the piece of code which will print 42.
    qcm2:
        choices:
        -   feedback: The correct answer is not attained. Didn't you forget an iteration?
            text: |-
                .. code-block:: python

                    i = 0
                    sum = 0
                    while i < n:
                        sum = sum+i
                        i+=1
        -   text: |-
                .. code-block:: python

                    i = n
                    sum = 0
                    while i <= n:
                        sum = sum+i
                        i-=1
            feedback: Your loop will never end. Check your condition.
        -   feedback: The indentation is an extremelly important part of coding in
                Python since it allows to know in which block the statement is executed.
                Are ``i`` and ``sum`` supposed to be assigned in a block before the
                loop?
            text: |-
                .. code-block:: python

                        i = 1
                        sum = 0
                    while i < n:
                        sum = sum+i
                        i+=1
        -   text: |-
                .. code-block:: python

                    i = 1
                    sum = 0
                    while i <= n:
                        sum = sum+i
                        i+=1
            valid: true
        header: Which of the following code fragments calculates the sum of the first
            ``n`` positive integers?
        limit: 4
        name: While loops
        type: multiple_choice
    qcm3:
        header: '``While`` loops are useful when we need to repeat similar tasks multiple
            times. In arithmetic, the factorial of a positive integer (``n``) and
            greater than `1` is defined as the product of all integers less than or
            equal to ``n``. The factorial of ``n`` is denoted as :math:`n!`. Thus
            :math:`4! = 24`. Among the ``while`` loops below, which one calculates
            correctly :math:`n!` ?'
        choices:
        -   feedback: Will your loop stop in other case than `1`?
            text: |-
                .. code-block:: python

                    n = 7
                    fact = n
                    count = n-1
                    while count > 0:
                        fact = fact * count
                        count+=1
        -   feedback: Pretty sure you calculated the factorial of `n-1` .
            text: |-
                .. code-block:: python

                    n = 7
                    fact = 1
                    count = 2
                    while count < n:
                        fact = fact * count
                        count+=1
        -   valid: true
            text: |-
                .. code-block:: python

                    n = 7
                    fact = 1
                    count = n
                    while count >= 2:
                        fact = fact * count
                        count-=1
        limit: 0
        type: multiple_choice
        name: While loops
    qcm4:
        name: Python syntax
        limit: 0
        header: Which of the following program fragments respects the syntax and semantics
            of the language?
        choices:
        -   feedback: The indentation is an extremelly important part of coding in
                Python since it allows to know in which block the statement is executed.
                In this case your program will meet an unexpected indentation.
            text: |
                .. code-block:: python

                    >>> x = 4
                    >>> y = 'test'
                    >>> z = 8
                    >>>     print(x)
        -   feedback: |-
                Since there is no type in Python a variable can contain as well an integer as text.

                test would be print with this code fragment.
            text: |-
                .. code-block:: python

                    >>> x = 4
                    >>> x = 'test'
                    >>> z = 8
                    >>> print(x)
                    4
        -   valid: true
            text: |-
                .. code-block:: python

                    >>> x = 4
                    >>> y = 'test'
                    >>> z = 8
                    >>> print(x)
                    4
        type: multiple_choice
    qcm5:
        choices:
        -   text: |-
                .. code-block:: python

                    for i in range(0,5):
                        print("#This is a comment")
            feedback: The comment is enclosed in a string.
        -   text: |-
                .. code-block:: python

                    for i in range(0,5):
                        print(i) # This is a comment
            valid: true
        -   text: |-
                .. code-block:: python

                    """ This is a comment"""
                    for i in range(0,5):
                        print(i)
            feedback: It is correct BUT don't use triple-quotes; this is for documentation
                strings not block comments, although it has a similar effect it is
                best practice to use ``#``
            valid: true
        name: Comments in Python
        limit: 0
        header: Check the snippets which contain a valid comment.
        type: multiple_choice
    qcm6:
        choices:
        -   text: |-
                .. code-block:: python

                    myVariable = 'This is lower camel case'
            feedback: |-
                Snake case is usually prefered regarding variables names.

                Although lower camel case is allowed for functions names in Python (where that's already the prevailing style).
        -   text: |-
                .. code-block:: python

                    my_variable = 'This is snake case'
            valid: true
        -   feedback: |-
                Snake case is usually prefered regarding variables names.

                Although screaming snake case is used for constant in Python.
            text: |-
                .. code-block:: python

                    MY_VARIABLE = 'This is screaming snake case'
        -   text: |-
                .. code-block:: python

                    MyVariable = 'This is upper camel case'
            feedback: |-
                Snake case is usually prefered regarding variables names.

                Although upper camel case is used for class names in Python.
        header: Which of the following statements are respecting the Python naming
            conventions?
        type: multiple_choice
        limit: 0
        name: Python naming conventions
    qcm7:
        choices:
        -   text: |-
                .. code-block:: python

                    b = a
                    a = b
            feedback: By doing it this way you will lose the value contained in ``b``
                and the value of ``a`` will be stored in the 2 variables.
        -   text: |-
                .. code-block:: python

                    c = b
                    b = a
                    a = c
            feedback: |-
                This would work but it is more efficient and clear to do it with this little trick:

                .. code-block:: python

                    a,b = b,a
            valid: true
        -   text: |-
                .. code-block:: python

                    a,b = b,a
            valid: true
        limit: 0
        header: |-
            It is often useful to be able to swap values between variables. Consider the following variables:

            .. code-block:: python

                a = 42
                b = 41

            Which of following code fragments swap the values correctly?
        type: multiple_choice
        name: Exchange variables values
    qcm8:
        choices:
        -   text: |
                .. code-block:: python

                    if a > b:
                        min = a
                    else:
                        min = b
            feedback: The maximum is stored in min instead of the minimum with this
                code.
        -   text: |
                .. code-block:: python

                    if a > b:
                    min = a
                    else:
                    min = b
            feedback: The indentation is an extremelly important part of coding in
                Python since it allows to know in which block the statement is executed.
                What is executed in this case if the condition is verified?
        -   valid: true
            text: |-
                .. code-block:: python

                    if a > b:
                        min = b
                    else:
                        min = a
        header: 'Consider a program that manipulates two variables: ``a`` and ``b``
            . Among the code fragments below, which one correctly stores in the variable
            ``min`` the minimum of the contents of the variables ``a`` and ``b`` ?'
        limit: 0
        name: Calculate min
        type: multiple_choice
    qcm9:
        limit: 0
        header: Which of these code fragments places in the variable ``abs`` the absolute
            value of ``x`` ?
        choices:
        -   feedback: What happens if ``x`` is a positive integer?
            text: |-
                .. code-block:: python

                    if x == 0:
                        abs = x
                    else:
                        abs = -x
        -   feedback: You should consider carefully the condition used to store `-x`
                in  ``abs`` .
            text: |-
                .. code-block:: python

                    if x > 0:
                        abs = -x
                    else:
                        abs = x
        -   text: |-
                .. code-block:: python

                    if x < 0:
                        abs = -x
                    else:
                        abs = x
            valid: true
        name: Absolute value
        type: multiple_choice
    qcm10:
        choices:
        -   feedback: Is there any way for ``x`` to be between ``a`` and ``b`` with
                this condition?
            text: |-
                .. code:: python

                    if x <= a and x < b:
                        print('true')
        -   text: |-
                .. code:: python

                    if a < x and x < b:
                        print('true')
            feedback: What happens if ``x == a`` ?
        -   valid: true
            text: |-
                .. code:: python

                    if a <= x and x < b:
                        print('true')
        header: In mathematics, we define intervals, closed, open and semi-open. The
            semi-open interval :math:`[3,7[` includes all real numbers that are greater
            than or equal to `3` and strictly less than 7. Which of the following
            code fragments display ``true`` on the standard output if and only if
            ``x`` belongs to the interval :math:`[a, b[` ? We assume for this question
            that the value stored in the variable ``a`` is strictly less than the
            one stored in the ``b`` variable.
        type: multiple_choice
        limit: 0
        name: Intervals
    qcm11:
        choices:
        -   text: |-
                .. code-block:: python

                    print(43/3)
            feedback: The result of the division is 14.333333334
        -   text: |-
                .. code-block:: python

                    to_print = '1'
                    print(to_print + 4)
            feedback: You cannot concatenate a string and an int.
        -   text: |-
                .. code-block:: python

                    print(43//3)
            valid: true
        header: Which of the following code fragments prints 14?
        name: Operators usages
        limit: 0
        type: multiple_choice
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0

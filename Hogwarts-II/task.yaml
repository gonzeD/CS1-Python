accessible: true
author: Tanguy De Bels
context: |-
    Once again, it is time for the *sorting ceremony*. The first years are waiting in line, in front of an old hat, both anxious and excited. The director makes a great speech to welcome them and gives the floor to a mysterious intervenant.

    Every first year is amazed when the **Sorting Hat** emerges from its silent and starts to sings one of its famous `song <http://fr.harrypotter.wikia.com/wiki/Chansons_du_Choixpeau_magique>`_.

    However, the old hat got a bit too far and meets now some performance issues. It is voiceless and won't be up to the task for the next part of the ceremony. Luckily enough we still have access to the founders' knowledge and we will be able to sort the students with your help.

    Create a function ``house_designation(student_qualities)`` that will return a list with the names of the houses from the one a student should be attributed to to the last one he sould go to. To decide his attribution, you should move him in the house in which he has the most affinities. If two houses shall be equals, return the first one in the given knowledge.

    .. raw:: html

       <script defer>
       $(document).ready(function(){
           setTimeout(function() {
           window.parent.postMessage({height: document.body.scrollHeight}, "*");
        }, 0);
       })
       </script>
environment: default
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: 'Session 5: Hogwarts - Sorting Hat'
network_grading: false
order: 22
problems:
    q1:
        header: |-
            Implement the function ``house_designation(student_qualities)`` in Python.

            You already have the ancestral knowledge of the **Hat** at your disposal:

            .. code-block:: python

                knowledge = [['Gryffindor', ['brave', 'strong', 'bold']],
                             ['Ravenclaw', ['smart', 'wise', 'curious']],
                             ['Hufflepuff', ['loyal', 'patient', 'hard-working']],
                             ['Slytherin', ['cunning', 'wily', 'malignant']]]
        type: code
        language: python
        name: Implementation
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
